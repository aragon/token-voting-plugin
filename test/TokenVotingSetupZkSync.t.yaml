TokenVotingSetupZkSyncTest:
  - when: Calling supportsInterface('0xffffffff')
    then:
      - it: does not support the empty interface
  - given: The context is prepareInstallation
    and:
      - when: Calling prepareInstallation with data that is empty or not of minimum length
        then:
          - it: fails if data is empty, or not of minimum length
      - when: Calling prepareInstallation if `MintSettings` arrays do not have the same length
        then:
          - it: fails if `MintSettings` arrays do not have the same length
      - when: Calling prepareInstallation if passed token address is not a contract
        then:
          - it: fails if passed token address is not a contract
      - when: Calling prepareInstallation if passed token address is not ERC20
        then:
          - it: fails if passed token address is not ERC20
      - when: Calling prepareInstallation and an ERC20 token address is supplied
        then:
          - it: correctly returns plugin, helpers and permissions, when an ERC20 token address is supplied
      - when: Calling prepareInstallation and an ERC20 token address is supplied
        then:
          - it: correctly sets up `GovernanceWrappedERC20` helper, when an ERC20 token address is supplied
      - when: Calling prepareInstallation and a governance token address is supplied
        then:
          - it: correctly returns plugin, helpers and permissions, when a governance token address is supplied
      - when: Calling prepareInstallation and a token address is not supplied
        then:
          - it: correctly returns plugin, helpers and permissions, when a token address is not supplied
      - when: Calling prepareInstallation and a token address is not passed
        then:
          - it: correctly sets up the plugin and helpers, when a token address is not passed

      - given: Creating a new token
        and:
          - when: The list of excluded accounts is not empty
            then:
              - it: Should prepare initialization data for the new GovernanceERC20 token that includes the excluded accounts for self-delegation
              - it: Should prepare initialization data for the TokenVoting plugin that includes the same list of excluded accounts
          - when: The list of excluded accounts is empty
            then:
              - it: Should prepare initialization data for both the token and plugin with an empty list of excluded accounts
      - when: Calling prepareInstallation() to use an existing token with a list of excluded accounts
        then:
          - it: Should prepare initialization data for the TokenVoting plugin that includes the list of excluded accounts
          - it: Should not attempt to modify the existing token

      - given: A set of installation parameters including a list of excluded accounts
        and:
          - when: Calling encodeInstallationParameters()
            then:
              - it: Should produce a byte string containing all parameters, including the excluded accounts
          - when: Calling decodeInstallationParameters() on the encoded byte string
            then:
              - it: Should correctly decode all original parameters, including the full list of excluded accounts
          - when: There are excluded accounts but no self delegation
            then:
              - it: Should prepare initialization data for both the token and plugin with excluded accounts but no balance excluded

  - given: The context is prepareUpdate
    and:
      - when: Calling prepareUpdate for an update from build 1
        then:
          - it: returns the permissions expected for the update from build 1
      - when: Calling prepareUpdate for an update from build 2
        then:
          - it: returns the permissions expected for the update from build 2
      - when: Calling prepareUpdate for an update from build 3
        then:
          - it: returns the permissions expected for the update from build 3 (empty list)
  - given: The context is prepareUninstallation
    and:
      - when: Calling prepareUninstallation and helpers contain a GovernanceWrappedERC20 token
        then:
          - it: correctly returns permissions, when the required number of helpers is supplied
      - when: Calling prepareUninstallation and helpers contain a GovernanceERC20 token
        then:
          - it: correctly returns permissions, when the required number of helpers is supplied
  - given: The installation parameters are defined
    and:
      - when: Calling encodeInstallationParameters() with the parameters
        then:
          - it: Should return the correct ABI-encoded byte representation
      - when: Calling decodeInstallationParameters() with the encoded data
        then:
          - it: Should return the original installation parameters

  - given: The installation request is for a new token
    and:
      - when: Calling prepareInstallation()
        then:
          - it: Should return exactly 7 permissions to be granted, including one for minting

  - given: The installation request is for an existing IVotes-compliant token
    and:
      - when: Calling prepareInstallation()
        then:
          - it: Should return exactly 6 permissions to be granted and NOT deploy a new token

  - given: A plugin is being updated from a build version less than 3
    and:
      - when: Calling prepareUpdate() with _fromBuild = 2
        then:
          - it: Should return the initData for the update and a new VotingPowerCondition helper
          - it: Should return 5 permission changes (1 revoke and 4 grants)

  - given: A plugin is being uninstalled
    and:
      - when: Calling prepareUninstallation()
        then:
          - it: Should return exactly 6 permissions to be revoked

  - given: A token contract that implements the IVotes interface functions
    and:
      - when: Calling supportsIVotesInterface() with the token's address
        then:
          - it: Should return true

  - given: A token contract that does not implement the IVotes interface functions
    and:
      - when: Calling supportsIVotesInterface() with the token's address
        then:
          - it: Should return false
