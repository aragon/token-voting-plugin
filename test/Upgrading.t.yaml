UpgradingTest:
  - when: Upgrading to a new implementation
    then:
      - it: upgrades to a new implementation

  - given: The contract is at R1 B1
    and:
      - when: Upgrading with `initializeFrom`
        then:
          - it: Upgrades from R1 B1 with `initializeFrom`
          - it: The old `initialize` function fails during the upgrade
          - it: initializeFrom succeeds
          - it: protocol versions are updated correctly
          - it: new settings are applied
          - it: the original `initialize` function is disabled post-upgrade
          - it: Should detect the token clock

  - given: The contract is at R1 B2
    and:
      - when: Upgrading with `initializeFrom`
        then:
          - it: upgrades from R1 B2 with `initializeFrom`
          - it: The old `initialize` function fails during the upgrade
          - it: initializeFrom succeeds
          - it: protocol versions are updated correctly
          - it: new settings are applied
          - it: the original `initialize` function is disabled post-upgrade
          - it: Should detect the token clock

  - given: The contract is at R1 B3
    and:
      - when: Upgrading with `initializeFrom`
        then:
          - it: upgrades from R1 B3 with `initializeFrom`
          - it: The old `initialize` function fails during the upgrade
          - it: initializeFrom succeeds
          - it: protocol versions are updated correctly
          - it: settings remain
          - it: the original `initialize` function is disabled post-upgrade
          - it: Should detect the token clock
